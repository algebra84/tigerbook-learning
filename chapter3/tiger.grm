%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%left AND OR
%nonassoc EQ NEQ GT GE LE LT
%left PLUS MINUS
%left TIMES DIV
%nonassoc UMINUS

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%%

/* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 */

program : exp

/* declation */
decs : dec decs
     |
     ;
dec : tydec
    | vardec
    | fundec
    ;

tydec : TYPE ID EQ ty
      ;
ty : ID
   | LBRACE tyfields RBRACE
   | ARRAY OF ID
   ;

tyfields_1 : ID COLON ID
           ;
tyfields_2 : COMMA tyfields_1 tyfields_2;
           |
           ;
tyfields : tyfields_1 tyfields_2
         |
         ;

vardec : VAR ID ASSIGN exp
       | VAR ID COLON ID ASSIGN exp
       ;

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
       ;

/* expression */
lvalue : ID
       | lvalue DOT ID
       | lvalue LBRACK ID RBRACK
       ;

sequencing : LPAREN exp SEMICOLON exp exp_2 RPAREN
           ;
explist : exp exp_2
        |
        ;

exp_2 : SEMICOLON exp exp_2
      |
      ;

arith_op : MINUS
         | PLUS
         | TIMES
         | DIV
         ;
arith : exp arith_op exp
      ;


comp_op : EQ
        | NEQ
        | GE
        | GT
        | LE
        | LT
        ;
boolen_op : AND
          | OR
          ;
comp : exp comp_op exp
     ;
strcomp : STRING comp_op STRING
        ;
boolen_arith : exp boolen_op exp
             ;

funcall : ID LPAREN RPAREN
        | ID LPAREN param RPAREN
        ;
param  : exp param_1
       ;
param_1 : COMMA exp param_1
        |
        ;

record_create : ID LBRACE record_arg RBRACE
              ;
record_arg: ID ASSIGN exp record_arg1
          |
          ;
record_arg1 : COMMA ID ASSIGN exp record_arg1
            |
            ;
array_create : ID LBRACK exp RBRACK OF exp
exp : NIL
    | sequencing
    | INT
    | STRING
    | MINUS exp %prec UMINUS
    | arith
    | comp
    | strcomp
    | boolen_arith
    | record_create
    | array_create
    | ID
    | lvalue ASSIGN exp
    | IF exp THEN exp ELSE exp
    | IF exp THEN exp
    | WHILE exp DO exp
    | FOR ID ASSIGN exp TO exp DO exp
    | BREAK
    | LET decs IN explist END
    | LPAREN explist RPAREN
    | funcall
    | LPAREN error RPAREN
    | error SEMICOLON exp
    ;