State 2 conflicts: 1 shift/reduce
State 3 conflicts: 6 shift/reduce
State 61 conflicts: 12 shift/reduce
State 82 conflicts: 12 shift/reduce
State 83 conflicts: 12 shift/reduce
State 84 conflicts: 12 shift/reduce
State 87 conflicts: 12 shift/reduce
State 94 conflicts: 13 shift/reduce
State 95 conflicts: 12 shift/reduce
State 108 conflicts: 1 shift/reduce
State 121 conflicts: 12 shift/reduce
State 125 conflicts: 12 shift/reduce
State 143 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 decs: dec decs
    3     | %empty

    4 dec: tydec
    5    | vardec
    6    | fundec

    7 tydec: TYPE ID EQ ty

    8 ty: ID
    9   | LBRACE tyfields RBRACE
   10   | ARRAY OF ID

   11 tyfields_1: ID COLON ID
   12           | tyfields_1 COMMA ID COLON ID

   13 tyfields: tyfields_1
   14         | %empty

   15 vardec: VAR ID ASSIGN exp
   16       | VAR ID COLON ID ASSIGN exp

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   18       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   19 exp: NIL
   20    | lvalue
   21    | sequencing
   22    | INT
   23    | STRING
   24    | MINUS exp
   25    | arith
   26    | comp
   27    | strcomp
   28    | boolen_arith
   29    | ID LBRACE RBRACE
   30    | ID LBRACE ass RBRACE
   31    | ID LBRACK exp RBRACK OF exp
   32    | lvalue ASSIGN exp
   33    | IF exp THEN exp ELSE exp
   34    | IF exp THEN exp
   35    | WHILE exp DO exp
   36    | FOR ID ASSIGN exp TO exp DO exp
   37    | BREAK
   38    | LET decs IN explist END
   39    | LPAREN explist RPAREN
   40    | funcall
   41    | LPAREN error RPAREN
   42    | error SEMICOLON exp

   43 lvalue: ID
   44       | lvalue DOT ID
   45       | lvalue LBRACK exp RBRACK
   46       | ID LBRACK exp RBRACK

   47 sequencing: LPAREN exp SEMICOLON exp exp_2 RPAREN

   48 explist: exp exp_2
   49        | %empty

   50 exp_2: SEMICOLON exp exp_2
   51      | %empty

   52 arith: exp arith_op exp

   53 comp: exp comp_op exp

   54 strcomp: STRING comp_op STRING

   55 boolen_arith: exp boolen_op exp

   56 comp_op: EQ
   57        | NEQ
   58        | GE
   59        | GT
   60        | LE
   61        | LT

   62 boolen_op: AND
   63          | OR

   64 arith_op: MINUS
   65         | PLUS
   66         | TIMES
   67         | DIVIDE

   68 funcall: ID LPAREN RPAREN
   69        | ID LPAREN param RPAREN

   70 param: exp
   71      | exp COMMA param

   72 ass: ID EQ exp
   73    | ID EQ exp COMMA ass


Terminals, with rules where they appear

$end (0) 0
error (256) 41 42
ID (258) 7 8 10 11 12 15 16 17 18 29 30 31 36 43 44 46 68 69 72 73
STRING (259) 23 54
INT (260) 22
AND (261) 62
OR (262) 63
EQ (263) 7 17 18 56 72 73
NEQ (264) 57
GT (265) 59
GE (266) 58
LE (267) 60
LT (268) 61
PLUS (269) 65
MINUS (270) 24 64
TIMES (271) 66
DIVIDE (272) 67
UMINUS (273)
COMMA (274) 12 71 73
COLON (275) 11 12 16 18
SEMICOLON (276) 42 47 50
LPAREN (277) 17 18 39 41 47 68 69
RPAREN (278) 17 18 39 41 47 68 69
LBRACK (279) 31 45 46
RBRACK (280) 31 45 46
LBRACE (281) 9 29 30
RBRACE (282) 9 29 30
DOT (283) 44
ASSIGN (284) 15 16 32 36
ARRAY (285) 10
IF (286) 33 34
THEN (287) 33 34
ELSE (288) 33
WHILE (289) 35
FOR (290) 36
TO (291) 36
DO (292) 35 36
LET (293) 38
IN (294) 38
END (295) 38
OF (296) 10 31
BREAK (297) 37
NIL (298) 19
FUNCTION (299) 17 18
VAR (300) 15 16
TYPE (301) 7


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
decs (49)
    on left: 2 3, on right: 2 38
dec (50)
    on left: 4 5 6, on right: 2
tydec (51)
    on left: 7, on right: 4
ty (52)
    on left: 8 9 10, on right: 7
tyfields_1 (53)
    on left: 11 12, on right: 12 13
tyfields (54)
    on left: 13 14, on right: 9 17 18
vardec (55)
    on left: 15 16, on right: 5
fundec (56)
    on left: 17 18, on right: 6
exp (57)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 41 42, on right: 1 15 16 17 18 24 31 32 33 34 35 36
    42 45 46 47 48 50 52 53 55 70 71 72 73
lvalue (58)
    on left: 43 44 45 46, on right: 20 32 44 45
sequencing (59)
    on left: 47, on right: 21
explist (60)
    on left: 48 49, on right: 38 39
exp_2 (61)
    on left: 50 51, on right: 47 48 50
arith (62)
    on left: 52, on right: 25
comp (63)
    on left: 53, on right: 26
strcomp (64)
    on left: 54, on right: 27
boolen_arith (65)
    on left: 55, on right: 28
comp_op (66)
    on left: 56 57 58 59 60 61, on right: 53 54
boolen_op (67)
    on left: 62 63, on right: 55
arith_op (68)
    on left: 64 65 66 67, on right: 52
funcall (69)
    on left: 68 69, on right: 40
param (70)
    on left: 70 71, on right: 69 71
ass (71)
    on left: 72 73, on right: 30 73


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    program       go to state 13
    exp           go to state 14
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 1

   42 exp: error . SEMICOLON exp

    SEMICOLON  shift, and go to state 22


State 2

   29 exp: ID . LBRACE RBRACE
   30    | ID . LBRACE ass RBRACE
   31    | ID . LBRACK exp RBRACK OF exp
   43 lvalue: ID .
   46       | ID . LBRACK exp RBRACK
   68 funcall: ID . LPAREN RPAREN
   69        | ID . LPAREN param RPAREN

    LPAREN  shift, and go to state 23
    LBRACK  shift, and go to state 24
    LBRACE  shift, and go to state 25

    LBRACK    [reduce using rule 43 (lvalue)]
    $default  reduce using rule 43 (lvalue)


State 3

   23 exp: STRING .
   54 strcomp: STRING . comp_op STRING

    EQ   shift, and go to state 26
    NEQ  shift, and go to state 27
    GT   shift, and go to state 28
    GE   shift, and go to state 29
    LE   shift, and go to state 30
    LT   shift, and go to state 31

    EQ        [reduce using rule 23 (exp)]
    NEQ       [reduce using rule 23 (exp)]
    GT        [reduce using rule 23 (exp)]
    GE        [reduce using rule 23 (exp)]
    LE        [reduce using rule 23 (exp)]
    LT        [reduce using rule 23 (exp)]
    $default  reduce using rule 23 (exp)

    comp_op  go to state 32


State 4

   22 exp: INT .

    $default  reduce using rule 22 (exp)


State 5

   24 exp: MINUS . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 33
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 6

   39 exp: LPAREN . explist RPAREN
   41    | LPAREN . error RPAREN
   47 sequencing: LPAREN . exp SEMICOLON exp exp_2 RPAREN

    error   shift, and go to state 34
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    RPAREN  reduce using rule 49 (explist)

    exp           go to state 35
    lvalue        go to state 15
    sequencing    go to state 16
    explist       go to state 36
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 7

   33 exp: IF . exp THEN exp ELSE exp
   34    | IF . exp THEN exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 37
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 8

   35 exp: WHILE . exp DO exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 38
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 9

   36 exp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 39


State 10

   38 exp: LET . decs IN explist END

    FUNCTION  shift, and go to state 40
    VAR       shift, and go to state 41
    TYPE      shift, and go to state 42

    $default  reduce using rule 3 (decs)

    decs    go to state 43
    dec     go to state 44
    tydec   go to state 45
    vardec  go to state 46
    fundec  go to state 47


State 11

   37 exp: BREAK .

    $default  reduce using rule 37 (exp)


State 12

   19 exp: NIL .

    $default  reduce using rule 19 (exp)


State 13

    0 $accept: program . $end

    $end  shift, and go to state 48


State 14

    1 program: exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    $default  reduce using rule 1 (program)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 15

   20 exp: lvalue .
   32    | lvalue . ASSIGN exp
   44 lvalue: lvalue . DOT ID
   45       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 58
    DOT     shift, and go to state 59
    ASSIGN  shift, and go to state 60

    $default  reduce using rule 20 (exp)


State 16

   21 exp: sequencing .

    $default  reduce using rule 21 (exp)


State 17

   25 exp: arith .

    $default  reduce using rule 25 (exp)


State 18

   26 exp: comp .

    $default  reduce using rule 26 (exp)


State 19

   27 exp: strcomp .

    $default  reduce using rule 27 (exp)


State 20

   28 exp: boolen_arith .

    $default  reduce using rule 28 (exp)


State 21

   40 exp: funcall .

    $default  reduce using rule 40 (exp)


State 22

   42 exp: error SEMICOLON . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 61
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 23

   68 funcall: ID LPAREN . RPAREN
   69        | ID LPAREN . param RPAREN

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    RPAREN  shift, and go to state 62
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 63
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21
    param         go to state 64


State 24

   31 exp: ID LBRACK . exp RBRACK OF exp
   46 lvalue: ID LBRACK . exp RBRACK

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 65
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 25

   29 exp: ID LBRACE . RBRACE
   30    | ID LBRACE . ass RBRACE

    ID      shift, and go to state 66
    RBRACE  shift, and go to state 67

    ass  go to state 68


State 26

   56 comp_op: EQ .

    $default  reduce using rule 56 (comp_op)


State 27

   57 comp_op: NEQ .

    $default  reduce using rule 57 (comp_op)


State 28

   59 comp_op: GT .

    $default  reduce using rule 59 (comp_op)


State 29

   58 comp_op: GE .

    $default  reduce using rule 58 (comp_op)


State 30

   60 comp_op: LE .

    $default  reduce using rule 60 (comp_op)


State 31

   61 comp_op: LT .

    $default  reduce using rule 61 (comp_op)


State 32

   54 strcomp: STRING comp_op . STRING

    STRING  shift, and go to state 69


State 33

   24 exp: MINUS exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    $default  reduce using rule 24 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 34

   41 exp: LPAREN error . RPAREN
   42    | error . SEMICOLON exp

    SEMICOLON  shift, and go to state 22
    RPAREN     shift, and go to state 70


State 35

   47 sequencing: LPAREN exp . SEMICOLON exp exp_2 RPAREN
   48 explist: exp . exp_2
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND        shift, and go to state 49
    OR         shift, and go to state 50
    EQ         shift, and go to state 26
    NEQ        shift, and go to state 27
    GT         shift, and go to state 28
    GE         shift, and go to state 29
    LE         shift, and go to state 30
    LT         shift, and go to state 31
    PLUS       shift, and go to state 51
    MINUS      shift, and go to state 52
    TIMES      shift, and go to state 53
    DIVIDE     shift, and go to state 54
    SEMICOLON  shift, and go to state 71

    $default  reduce using rule 51 (exp_2)

    exp_2      go to state 72
    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 36

   39 exp: LPAREN explist . RPAREN

    RPAREN  shift, and go to state 73


State 37

   33 exp: IF exp . THEN exp ELSE exp
   34    | IF exp . THEN exp
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    THEN    shift, and go to state 74

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 38

   35 exp: WHILE exp . DO exp
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    DO      shift, and go to state 75

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 39

   36 exp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 76


State 40

   17 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   18       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 77


State 41

   15 vardec: VAR . ID ASSIGN exp
   16       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 78


State 42

    7 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 79


State 43

   38 exp: LET decs . IN explist END

    IN  shift, and go to state 80


State 44

    2 decs: dec . decs

    FUNCTION  shift, and go to state 40
    VAR       shift, and go to state 41
    TYPE      shift, and go to state 42

    $default  reduce using rule 3 (decs)

    decs    go to state 81
    dec     go to state 44
    tydec   go to state 45
    vardec  go to state 46
    fundec  go to state 47


State 45

    4 dec: tydec .

    $default  reduce using rule 4 (dec)


State 46

    5 dec: vardec .

    $default  reduce using rule 5 (dec)


State 47

    6 dec: fundec .

    $default  reduce using rule 6 (dec)


State 48

    0 $accept: program $end .

    $default  accept


State 49

   62 boolen_op: AND .

    $default  reduce using rule 62 (boolen_op)


State 50

   63 boolen_op: OR .

    $default  reduce using rule 63 (boolen_op)


State 51

   65 arith_op: PLUS .

    $default  reduce using rule 65 (arith_op)


State 52

   64 arith_op: MINUS .

    $default  reduce using rule 64 (arith_op)


State 53

   66 arith_op: TIMES .

    $default  reduce using rule 66 (arith_op)


State 54

   67 arith_op: DIVIDE .

    $default  reduce using rule 67 (arith_op)


State 55

   53 comp: exp comp_op . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 82
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 56

   55 boolen_arith: exp boolen_op . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 83
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 57

   52 arith: exp arith_op . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 84
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 58

   45 lvalue: lvalue LBRACK . exp RBRACK

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 85
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 59

   44 lvalue: lvalue DOT . ID

    ID  shift, and go to state 86


State 60

   32 exp: lvalue ASSIGN . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 87
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 61

   42 exp: error SEMICOLON exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 42 (exp)]
    OR        [reduce using rule 42 (exp)]
    EQ        [reduce using rule 42 (exp)]
    NEQ       [reduce using rule 42 (exp)]
    GT        [reduce using rule 42 (exp)]
    GE        [reduce using rule 42 (exp)]
    LE        [reduce using rule 42 (exp)]
    LT        [reduce using rule 42 (exp)]
    PLUS      [reduce using rule 42 (exp)]
    MINUS     [reduce using rule 42 (exp)]
    TIMES     [reduce using rule 42 (exp)]
    DIVIDE    [reduce using rule 42 (exp)]
    $default  reduce using rule 42 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 62

   68 funcall: ID LPAREN RPAREN .

    $default  reduce using rule 68 (funcall)


State 63

   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp
   70 param: exp .
   71      | exp . COMMA param

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    COMMA   shift, and go to state 88

    $default  reduce using rule 70 (param)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 64

   69 funcall: ID LPAREN param . RPAREN

    RPAREN  shift, and go to state 89


State 65

   31 exp: ID LBRACK exp . RBRACK OF exp
   46 lvalue: ID LBRACK exp . RBRACK
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    RBRACK  shift, and go to state 90

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 66

   72 ass: ID . EQ exp
   73    | ID . EQ exp COMMA ass

    EQ  shift, and go to state 91


State 67

   29 exp: ID LBRACE RBRACE .

    $default  reduce using rule 29 (exp)


State 68

   30 exp: ID LBRACE ass . RBRACE

    RBRACE  shift, and go to state 92


State 69

   54 strcomp: STRING comp_op STRING .

    $default  reduce using rule 54 (strcomp)


State 70

   41 exp: LPAREN error RPAREN .

    $default  reduce using rule 41 (exp)


State 71

   47 sequencing: LPAREN exp SEMICOLON . exp exp_2 RPAREN
   50 exp_2: SEMICOLON . exp exp_2

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 93
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 72

   48 explist: exp exp_2 .

    $default  reduce using rule 48 (explist)


State 73

   39 exp: LPAREN explist RPAREN .

    $default  reduce using rule 39 (exp)


State 74

   33 exp: IF exp THEN . exp ELSE exp
   34    | IF exp THEN . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 94
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 75

   35 exp: WHILE exp DO . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 95
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 76

   36 exp: FOR ID ASSIGN . exp TO exp DO exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 96
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 77

   17 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   18       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 97


State 78

   15 vardec: VAR ID . ASSIGN exp
   16       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 98
    ASSIGN  shift, and go to state 99


State 79

    7 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 100


State 80

   38 exp: LET decs IN . explist END

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    END  reduce using rule 49 (explist)

    exp           go to state 101
    lvalue        go to state 15
    sequencing    go to state 16
    explist       go to state 102
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 81

    2 decs: dec decs .

    $default  reduce using rule 2 (decs)


State 82

   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   53     | exp comp_op exp .
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 53 (comp)]
    OR        [reduce using rule 53 (comp)]
    EQ        [reduce using rule 53 (comp)]
    NEQ       [reduce using rule 53 (comp)]
    GT        [reduce using rule 53 (comp)]
    GE        [reduce using rule 53 (comp)]
    LE        [reduce using rule 53 (comp)]
    LT        [reduce using rule 53 (comp)]
    PLUS      [reduce using rule 53 (comp)]
    MINUS     [reduce using rule 53 (comp)]
    TIMES     [reduce using rule 53 (comp)]
    DIVIDE    [reduce using rule 53 (comp)]
    $default  reduce using rule 53 (comp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 83

   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp
   55             | exp boolen_op exp .

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 55 (boolen_arith)]
    OR        [reduce using rule 55 (boolen_arith)]
    EQ        [reduce using rule 55 (boolen_arith)]
    NEQ       [reduce using rule 55 (boolen_arith)]
    GT        [reduce using rule 55 (boolen_arith)]
    GE        [reduce using rule 55 (boolen_arith)]
    LE        [reduce using rule 55 (boolen_arith)]
    LT        [reduce using rule 55 (boolen_arith)]
    PLUS      [reduce using rule 55 (boolen_arith)]
    MINUS     [reduce using rule 55 (boolen_arith)]
    TIMES     [reduce using rule 55 (boolen_arith)]
    DIVIDE    [reduce using rule 55 (boolen_arith)]
    $default  reduce using rule 55 (boolen_arith)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 84

   52 arith: exp . arith_op exp
   52      | exp arith_op exp .
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 52 (arith)]
    OR        [reduce using rule 52 (arith)]
    EQ        [reduce using rule 52 (arith)]
    NEQ       [reduce using rule 52 (arith)]
    GT        [reduce using rule 52 (arith)]
    GE        [reduce using rule 52 (arith)]
    LE        [reduce using rule 52 (arith)]
    LT        [reduce using rule 52 (arith)]
    PLUS      [reduce using rule 52 (arith)]
    MINUS     [reduce using rule 52 (arith)]
    TIMES     [reduce using rule 52 (arith)]
    DIVIDE    [reduce using rule 52 (arith)]
    $default  reduce using rule 52 (arith)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 85

   45 lvalue: lvalue LBRACK exp . RBRACK
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    RBRACK  shift, and go to state 103

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 86

   44 lvalue: lvalue DOT ID .

    $default  reduce using rule 44 (lvalue)


State 87

   32 exp: lvalue ASSIGN exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 32 (exp)]
    OR        [reduce using rule 32 (exp)]
    EQ        [reduce using rule 32 (exp)]
    NEQ       [reduce using rule 32 (exp)]
    GT        [reduce using rule 32 (exp)]
    GE        [reduce using rule 32 (exp)]
    LE        [reduce using rule 32 (exp)]
    LT        [reduce using rule 32 (exp)]
    PLUS      [reduce using rule 32 (exp)]
    MINUS     [reduce using rule 32 (exp)]
    TIMES     [reduce using rule 32 (exp)]
    DIVIDE    [reduce using rule 32 (exp)]
    $default  reduce using rule 32 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 88

   71 param: exp COMMA . param

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 63
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21
    param         go to state 104


State 89

   69 funcall: ID LPAREN param RPAREN .

    $default  reduce using rule 69 (funcall)


State 90

   31 exp: ID LBRACK exp RBRACK . OF exp
   46 lvalue: ID LBRACK exp RBRACK .

    OF  shift, and go to state 105

    $default  reduce using rule 46 (lvalue)


State 91

   72 ass: ID EQ . exp
   73    | ID EQ . exp COMMA ass

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 106
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 92

   30 exp: ID LBRACE ass RBRACE .

    $default  reduce using rule 30 (exp)


State 93

   47 sequencing: LPAREN exp SEMICOLON exp . exp_2 RPAREN
   50 exp_2: SEMICOLON exp . exp_2
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND        shift, and go to state 49
    OR         shift, and go to state 50
    EQ         shift, and go to state 26
    NEQ        shift, and go to state 27
    GT         shift, and go to state 28
    GE         shift, and go to state 29
    LE         shift, and go to state 30
    LT         shift, and go to state 31
    PLUS       shift, and go to state 51
    MINUS      shift, and go to state 52
    TIMES      shift, and go to state 53
    DIVIDE     shift, and go to state 54
    SEMICOLON  shift, and go to state 107

    $default  reduce using rule 51 (exp_2)

    exp_2      go to state 108
    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 94

   33 exp: IF exp THEN exp . ELSE exp
   34    | IF exp THEN exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    ELSE    shift, and go to state 109

    AND       [reduce using rule 34 (exp)]
    OR        [reduce using rule 34 (exp)]
    EQ        [reduce using rule 34 (exp)]
    NEQ       [reduce using rule 34 (exp)]
    GT        [reduce using rule 34 (exp)]
    GE        [reduce using rule 34 (exp)]
    LE        [reduce using rule 34 (exp)]
    LT        [reduce using rule 34 (exp)]
    PLUS      [reduce using rule 34 (exp)]
    MINUS     [reduce using rule 34 (exp)]
    TIMES     [reduce using rule 34 (exp)]
    DIVIDE    [reduce using rule 34 (exp)]
    ELSE      [reduce using rule 34 (exp)]
    $default  reduce using rule 34 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 95

   35 exp: WHILE exp DO exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 35 (exp)]
    OR        [reduce using rule 35 (exp)]
    EQ        [reduce using rule 35 (exp)]
    NEQ       [reduce using rule 35 (exp)]
    GT        [reduce using rule 35 (exp)]
    GE        [reduce using rule 35 (exp)]
    LE        [reduce using rule 35 (exp)]
    LT        [reduce using rule 35 (exp)]
    PLUS      [reduce using rule 35 (exp)]
    MINUS     [reduce using rule 35 (exp)]
    TIMES     [reduce using rule 35 (exp)]
    DIVIDE    [reduce using rule 35 (exp)]
    $default  reduce using rule 35 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 96

   36 exp: FOR ID ASSIGN exp . TO exp DO exp
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    TO      shift, and go to state 110

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 97

   17 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   18       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 111

    $default  reduce using rule 14 (tyfields)

    tyfields_1  go to state 112
    tyfields    go to state 113


State 98

   16 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 114


State 99

   15 vardec: VAR ID ASSIGN . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 115
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 100

    7 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 116
    LBRACE  shift, and go to state 117
    ARRAY   shift, and go to state 118

    ty  go to state 119


State 101

   48 explist: exp . exp_2
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND        shift, and go to state 49
    OR         shift, and go to state 50
    EQ         shift, and go to state 26
    NEQ        shift, and go to state 27
    GT         shift, and go to state 28
    GE         shift, and go to state 29
    LE         shift, and go to state 30
    LT         shift, and go to state 31
    PLUS       shift, and go to state 51
    MINUS      shift, and go to state 52
    TIMES      shift, and go to state 53
    DIVIDE     shift, and go to state 54
    SEMICOLON  shift, and go to state 107

    $default  reduce using rule 51 (exp_2)

    exp_2      go to state 72
    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 102

   38 exp: LET decs IN explist . END

    END  shift, and go to state 120


State 103

   45 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 45 (lvalue)


State 104

   71 param: exp COMMA param .

    $default  reduce using rule 71 (param)


State 105

   31 exp: ID LBRACK exp RBRACK OF . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 121
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 106

   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp
   72 ass: ID EQ exp .
   73    | ID EQ exp . COMMA ass

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    COMMA   shift, and go to state 122

    $default  reduce using rule 72 (ass)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 107

   50 exp_2: SEMICOLON . exp exp_2

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 123
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 108

   47 sequencing: LPAREN exp SEMICOLON exp exp_2 . RPAREN
   50 exp_2: SEMICOLON exp exp_2 .

    RPAREN  shift, and go to state 124

    RPAREN  [reduce using rule 50 (exp_2)]


State 109

   33 exp: IF exp THEN exp ELSE . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 125
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 110

   36 exp: FOR ID ASSIGN exp TO . exp DO exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 126
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 111

   11 tyfields_1: ID . COLON ID

    COLON  shift, and go to state 127


State 112

   12 tyfields_1: tyfields_1 . COMMA ID COLON ID
   13 tyfields: tyfields_1 .

    COMMA  shift, and go to state 128

    $default  reduce using rule 13 (tyfields)


State 113

   17 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   18       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 129


State 114

   16 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 130


State 115

   15 vardec: VAR ID ASSIGN exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    $default  reduce using rule 15 (vardec)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 116

    8 ty: ID .

    $default  reduce using rule 8 (ty)


State 117

    9 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 111

    $default  reduce using rule 14 (tyfields)

    tyfields_1  go to state 112
    tyfields    go to state 131


State 118

   10 ty: ARRAY . OF ID

    OF  shift, and go to state 132


State 119

    7 tydec: TYPE ID EQ ty .

    $default  reduce using rule 7 (tydec)


State 120

   38 exp: LET decs IN explist END .

    $default  reduce using rule 38 (exp)


State 121

   31 exp: ID LBRACK exp RBRACK OF exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 31 (exp)]
    OR        [reduce using rule 31 (exp)]
    EQ        [reduce using rule 31 (exp)]
    NEQ       [reduce using rule 31 (exp)]
    GT        [reduce using rule 31 (exp)]
    GE        [reduce using rule 31 (exp)]
    LE        [reduce using rule 31 (exp)]
    LT        [reduce using rule 31 (exp)]
    PLUS      [reduce using rule 31 (exp)]
    MINUS     [reduce using rule 31 (exp)]
    TIMES     [reduce using rule 31 (exp)]
    DIVIDE    [reduce using rule 31 (exp)]
    $default  reduce using rule 31 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 122

   73 ass: ID EQ exp COMMA . ass

    ID  shift, and go to state 66

    ass  go to state 133


State 123

   50 exp_2: SEMICOLON exp . exp_2
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND        shift, and go to state 49
    OR         shift, and go to state 50
    EQ         shift, and go to state 26
    NEQ        shift, and go to state 27
    GT         shift, and go to state 28
    GE         shift, and go to state 29
    LE         shift, and go to state 30
    LT         shift, and go to state 31
    PLUS       shift, and go to state 51
    MINUS      shift, and go to state 52
    TIMES      shift, and go to state 53
    DIVIDE     shift, and go to state 54
    SEMICOLON  shift, and go to state 107

    $default  reduce using rule 51 (exp_2)

    exp_2      go to state 134
    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 124

   47 sequencing: LPAREN exp SEMICOLON exp exp_2 RPAREN .

    $default  reduce using rule 47 (sequencing)


State 125

   33 exp: IF exp THEN exp ELSE exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 33 (exp)]
    OR        [reduce using rule 33 (exp)]
    EQ        [reduce using rule 33 (exp)]
    NEQ       [reduce using rule 33 (exp)]
    GT        [reduce using rule 33 (exp)]
    GE        [reduce using rule 33 (exp)]
    LE        [reduce using rule 33 (exp)]
    LT        [reduce using rule 33 (exp)]
    PLUS      [reduce using rule 33 (exp)]
    MINUS     [reduce using rule 33 (exp)]
    TIMES     [reduce using rule 33 (exp)]
    DIVIDE    [reduce using rule 33 (exp)]
    $default  reduce using rule 33 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 126

   36 exp: FOR ID ASSIGN exp TO exp . DO exp
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54
    DO      shift, and go to state 135

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 127

   11 tyfields_1: ID COLON . ID

    ID  shift, and go to state 136


State 128

   12 tyfields_1: tyfields_1 COMMA . ID COLON ID

    ID  shift, and go to state 137


State 129

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   18       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    EQ     shift, and go to state 138
    COLON  shift, and go to state 139


State 130

   16 vardec: VAR ID COLON ID ASSIGN . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 140
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 131

    9 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 141


State 132

   10 ty: ARRAY OF . ID

    ID  shift, and go to state 142


State 133

   73 ass: ID EQ exp COMMA ass .

    $default  reduce using rule 73 (ass)


State 134

   50 exp_2: SEMICOLON exp exp_2 .

    $default  reduce using rule 50 (exp_2)


State 135

   36 exp: FOR ID ASSIGN exp TO exp DO . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 143
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 136

   11 tyfields_1: ID COLON ID .

    $default  reduce using rule 11 (tyfields_1)


State 137

   12 tyfields_1: tyfields_1 COMMA ID . COLON ID

    COLON  shift, and go to state 144


State 138

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 145
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 139

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 146


State 140

   16 vardec: VAR ID COLON ID ASSIGN exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    $default  reduce using rule 16 (vardec)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 141

    9 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 9 (ty)


State 142

   10 ty: ARRAY OF ID .

    $default  reduce using rule 10 (ty)


State 143

   36 exp: FOR ID ASSIGN exp TO exp DO exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    AND       [reduce using rule 36 (exp)]
    OR        [reduce using rule 36 (exp)]
    EQ        [reduce using rule 36 (exp)]
    NEQ       [reduce using rule 36 (exp)]
    GT        [reduce using rule 36 (exp)]
    GE        [reduce using rule 36 (exp)]
    LE        [reduce using rule 36 (exp)]
    LT        [reduce using rule 36 (exp)]
    PLUS      [reduce using rule 36 (exp)]
    MINUS     [reduce using rule 36 (exp)]
    TIMES     [reduce using rule 36 (exp)]
    DIVIDE    [reduce using rule 36 (exp)]
    $default  reduce using rule 36 (exp)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 144

   12 tyfields_1: tyfields_1 COMMA ID COLON . ID

    ID  shift, and go to state 147


State 145

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    $default  reduce using rule 17 (fundec)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57


State 146

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 148


State 147

   12 tyfields_1: tyfields_1 COMMA ID COLON ID .

    $default  reduce using rule 12 (tyfields_1)


State 148

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    error   shift, and go to state 1
    ID      shift, and go to state 2
    STRING  shift, and go to state 3
    INT     shift, and go to state 4
    MINUS   shift, and go to state 5
    LPAREN  shift, and go to state 6
    IF      shift, and go to state 7
    WHILE   shift, and go to state 8
    FOR     shift, and go to state 9
    LET     shift, and go to state 10
    BREAK   shift, and go to state 11
    NIL     shift, and go to state 12

    exp           go to state 149
    lvalue        go to state 15
    sequencing    go to state 16
    arith         go to state 17
    comp          go to state 18
    strcomp       go to state 19
    boolen_arith  go to state 20
    funcall       go to state 21


State 149

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .
   52 arith: exp . arith_op exp
   53 comp: exp . comp_op exp
   55 boolen_arith: exp . boolen_op exp

    AND     shift, and go to state 49
    OR      shift, and go to state 50
    EQ      shift, and go to state 26
    NEQ     shift, and go to state 27
    GT      shift, and go to state 28
    GE      shift, and go to state 29
    LE      shift, and go to state 30
    LT      shift, and go to state 31
    PLUS    shift, and go to state 51
    MINUS   shift, and go to state 52
    TIMES   shift, and go to state 53
    DIVIDE  shift, and go to state 54

    $default  reduce using rule 18 (fundec)

    comp_op    go to state 55
    boolen_op  go to state 56
    arith_op   go to state 57
